import socket, os
from pqc.sign import dilithium2 as sigalg
from pqc.kem import kyber512 as kemalg
import pyotp
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

HOST = '127.0.0.1'
PORT = 8080

USERNAME    = 'user1'
DILITHIUM_SK= bytes.fromhex('3ab31d75408f8a94feae1c70793899153d2ed157bc1c7f6c121f96ff929ea482e2c416e57599b42d76b147216afcfa72a979417a1f7c62a3811bee403da110d36927cfeaf6f8dc874c14c4e6ebbaf6dcdfd46c7fc27196350f6925052745d2724c0ef615bcb606b337a7ae8b5aefdf0b3bbc6c8baf89a28c0ee8b893b0368af252048e0b382a21a504c0264a213766cc46721aa924a2942c244166d9a00002374a04878181444ca3b631ca8090c1b481000751d0040823b60411a54c09050082b88918302214a2601bb4894aa8048c262cd9c224dcb4000c112d1938201a233018a6001818664834261233114b28845114506446705b920500354661c411e000845a1844c2406444a2498b3048481812cc020d43080608b264da380c9cc81083342523472260a06d03244221b005dc122521408289184d54102e20179210308288b28c53206893042154206648188203b02412b98144322004358e40488c22b069e1384109000d0a3630dc984c9906850c249280180904129053902d519021d3246d82466284a845d9b04802092c990651c498850b180682442102216ca400220c2908e2802983180593c824c920864c802912b12062988921484c09b30840389243348053a62c42308a231789c0108453400a01a211a34872cbc47019b689c2100e1ac94c108100814644d8b62c1417010cb021143601cc402150c86110a67013198c0c85698a106a4a06865902842139095a406a10131018b4710a9045d2c68889284051240e1a216c80b62502840053b465a4985022456501a72d5294040a440ad3168642048c4338450a458298862109424861c06c88804489224a43a20518204e601226890432e1968d02a845231344d806241c9724a1409251b065d30049941888dca6488b842104b080c3c0652223311b019118b1440a278a5842621ca3041a4408db42902298892020409c880509098121466d1a940921972da0304919b8000b0731d092045b400e9a260800296c89b44942026619496ed080500b380c0cc489612826caa8689120261349659484700c2862114010c8040a88b2308ac04c09006202a9718c406453326cc3946002038c22198c80b8494a403101c2052482611a97410927424c104e61480a524650238181120440018289e4142a93488d4036121445010b450881164c414628a0024c20c02994b03024b44c2147450aa6648a286192860889162453308e4a125119292581306863268683266e12b550766c009a6ac4dda35a872f4f1de0f914acb97af06752dea92151e8df1d16302be09e1606273b48d91abfe9bc3ba85ce8bbdbb46ad7243f4a87d977151dec88ddadeb46376ef6c187ed99eb0ea0ebd976553c1bbbc8a8fb43f22df81d096d21da943897b423bd10c0423ef9bdb44de72a953e888057ae95bf85c4d298ae9dcd51ab2937bedf3dae7edbdf164a1feee7d56dc5433802733ca234c7052a92324ad900cdb8499a02fe2fa99098cb3b758ee7fb9d280aa5019349b8414ca9fdf7acbca97a6dd803f823660beb50aa9755126939d0f86b1ed6b0458c92e4c0c9c2afcf592f6c4e11a785332ba334b4bf438e5e010c51e6584220cc11a58f05f379ef99bda5805d41a81b6a227c60f6fa12921bebe36e05c8db4109627ec6fd1d2f0554f16c64abb02b3e7294df84c721e6238e506bb3509b62eda5ece4aa76d6305e4c5651f20d6d683ec1aee6f32f1c7b318a829c12bcb4ad0eaa3b79e59bb4ccae8609523b0c1fe1eced6ae977870828e681b5b3a2534e49dc190cdc5918adbe894aa61d0582ef2de681181b281621eb6f1129282022e572534db2b9aa4ab49b24298d6973990a1ac6fde4d2b2e6b3f18f53ea4fa0098f637b8ade522a0ac76129b3c3ca84b9c1944c3a0f5010c3759152bf6c46f04f0f55651f46077aad4cbc88d540270ce511c2c7283e3a0b9605203aafb53894c281c1b3d37c52e1f20b110e13f10d10ba36607caf0838094af73f74d377b47258d69b3e71c45f5a848a9ad38c6da9d670ee6ffe799196efc956d8f6fb8cf6c3270277464200f8cfa1c799ebcdcdb63abe29491817958cf82f8564ac757b542df64fed34a650616f3686697bc40daaf2a2f2a134977db42da713716702827c1ac634a73bc847e68c3d9be4c72a1b49ef51ed52628c43cbd487fa95d905f406f32815a0f7189b2113eead49582048d4b9b5086afa41c590b1713f0be847e83da99e43982d30c3d6aa552a96a57978da39a8baa290370dc56b2a56361d881c0f39c15392f3c021ef5a95ce96b86e75474fc74d52eb836ccef27995a5c02aa00dc173b0572102df77e8baad88985e07549b45e825807792f5daa01ecd6ad1eb698d962835f2fcb7288d17acbdf3ec5970c8b3ecb1da7bb14874a45d77dfbd27fa9963313609cfa94223c440eeafe93c7de2adc562ff8afe39a40ee52fbea407833673ed898a909e328bbc2583fa0c873054261b277ec584e004ddd196c05973cb9c428a4caef977d5f9c3bf1d813336767cc869056ba24325cec87bbe8a61301b01481d8461e4a7ef63f40ae4e261fce9f5f998d3a243f19a3129af611659c5ec25714af9be1dbe1b4b28ba953aa3ddd1088f003c88dd23bda8b7a9d77d4bf2fc8de9eda332c4fc9dae157626fb438ebef84aba77c19c5e4223937d4ced3649ef0d77fccd124e1e87ba90eb6b69ca9212792b0bcca52f5a229ca5a41747a4cdc02b9b0091b8d05ce517ce0d3ee09c2accdd06c8b7517d66c60412506e2f1adbb7b06f044f76d121119750c9ce2b6186b7f1876bb95342799dff9f6a76b3f8764f6a8449e0138a692a5d1ad95027c7867aa507d9ab78da2d58e287d45368c600c3a00587304d0c8d359803b22d17f0941afc6c7c2b1bdbe783b476ddf47dc37136f161dbfbd2824cb6d54efe4d5adb4bb9b2251d788c00a9c76e68a2c5132f4f462ce9adbf7963ada65ac4ba582977658af6d77839713d78c6a91b889d608cd797dca396937800a8d39d980bb71cb4fb8a00e46ef7c026809cb401f0e5ce1e1344928c0c44021097a91ec94dcea1a7f249861a9d2bb16c1043c560af659b91a5ddb3be33d03d096df7653889b65739b2cb3cbad522fcca07c4e04da79d3bbe8ae69736879546d5e864e0ab6d22ca772366a1b9e614708462bbf48ed3f542d212266297e47aa6fe728fe90591f4cc3344772fac04e1a48d9606815dfa1de4189726b6a5996fd496733b566cb787c7405f865910631bbf5d767203e3fe01329775d2e442ea081116922423e44d4199c5447c63f2f119dabce72b14dfa956f3d06da6713b6ed103ce58ac6276ab42fbd6983d5a60fad21fb5a43f67f04d904f87c8014070ebd64c7a85e3d24d023d85ff91297315a9a8b5a2d62682cafb9c52da73ff830ec4f96a1d4d8bd8bb849435498a4efbc69bfac842a801f9bda28779e6dd9a07046b61bc52ad5887ef2691fc3b346730f8289a13b71ec866e7bb53616865d22c1fa1474d1e28618af2c5dd9bd4145723ff740016d3bbc4f746d1b87469c03d06b9cb69f7b6245e9394525e32acf4319b0d5ed8230fd9098e6d27236d5d78553f0eea6c2447e3c499eae2bc1164')   # hex 格式貼入私鑰
TOTP_SECRET = 'JBSWY3DPEHPK3PXP'

def aes_encrypt(key, plaintext):
    iv = os.urandom(12)
    enc = Cipher(algorithms.AES(key), modes.GCM(iv)).encryptor()
    ct = enc.update(plaintext) + enc.finalize()
    return iv, ct, enc.tag

with socket.socket() as s:
    s.connect((HOST, PORT))

    # 1. 接收挑戰
    data = s.recv(1024)
    challenge = data[len(b'AUTH_CHALLENGE'):]

    # 2. 簽名 + 2FA
    signature = sigalg.sign(challenge, DILITHIUM_SK)
    totp = pyotp.TOTP(TOTP_SECRET)
    code = totp.now().encode()

    payload = bytearray(b'AUTH_RESPONSE')
    payload.append(len(USERNAME))
    payload += USERNAME.encode()
    payload += len(signature).to_bytes(2,'big') + signature
    payload += code
    s.sendall(payload)

    if s.recv(32) != b'AUTH_SUCCESS':
        print("Auth failed"); exit()
    print("[*] Authenticated")

    if s.recv(32) != b'LOGIN_SUCCESS':
        print("Login failed"); exit()
    print("[*] Logged in via KMS")

    # 3. Kyber512 會話建立
    data = s.recv(4096)
    server_pk = data[len(b'KEM_PUBLIC'):]
    ciphertext, shared_secret = kemalg.encap(server_pk)
    s.sendall(b'KEM_CIPHERTEXT' + ciphertext)
    assert s.recv(16) == b'KEM_DONE'
    print("[*] Kyber shared secret ready")

    # 4. 加密傳訊
    for msg in [b'Hello, server!', b'This is a secret.']:
        iv, ct2, tag = aes_encrypt(shared_secret, msg)
        s.sendall(b'\x01' + iv + tag + len(ct2).to_bytes(4,'big') + ct2)
    print("[*] Messages sent")
