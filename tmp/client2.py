import socket, os
from pqc.sign import dilithium2 as sigalg
from pqc.kem import kyber512 as kemalg
import pyotp
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

HOST = '127.0.0.1'
PORT = 12345

USERNAME    = 'user1'
DILITHIUM_SK= bytes.fromhex('ade2a221fc446bf1f1739a892bc0e4efe0a76b82bd28f5dc4966cd9ed4f8b0d45cf41128b8450e9f9b2484c1638c61cdef7c6a0b16f3d69bc72395f81c558519591920c6a8a998df4e1dc282e6877629294d4bcca215143a2933730fd2cbf39b9a42ca3e43a67b78dc381d7b67cdb7520ad12c62bae410cfae6ba0cea2d5cad9012125e4024dd132918a180140284840b87184b20913358a0a42095102491c4411a4b68c834612da344dc398515400490c00290135914a2891d224310903041b186291148091826450142512a44004c48c14034208402d8048121a372ca326601a813122834123496e8016900c95108b4448e3282d610802a3061004484582168c22458ac9906cd4464124388901c8501a240521086d4242695384491936310836914c36418b002143c8281a3920c2148863c2919c382d63a2519b109188002224038edb8644a22670e42892642408d086314090509a32815ab04c0b0832d184882209221c1966c14040d232605b164a12140d92244962c07052166011492001448ad1963140880d1c360a9ca45054324189b80518846451222d9a36250a81045482809b80490938060b2171d116009a928814937104058988b68d5bc6854c4268111404e2027014154593320854184610354d483641cc060ca294010328850c478142386c21b3709848001cc16dc9088d12373224b80c191244d3c0301019648110666392448c90101304820b3506202649228540d04211633642e210221226311a217250082e12107041280d03100accb68c22b7659a902c60b0005b4425e216824a2061411440c1106c9414860c014602413053c2711c978d8ab62c18002a21096421c861e14065c3c86c519850c04682641449603668500889d2048159149114c389d18265244461628211192029030471198361a21401c422688c4866044426e0281041964c8128111c0751da222ac8028e40220c9b36040024040b129150161252286a0148659042604c84690490295a409108842c62424ac926059aa80413116512862888946591a8405a800c8b848412a4401196898088680220311388012491301a48469aa8080bb605d1b844c8206664386c11b06dcc90810304304aa20118466814270041228d0c0022e032128aa64912352209a8008424128244629c3462dc1060039221e0364409466c641830c32630da964082824c9890009320249012294808720c04010880108cb88410976c0a110e18278918420c04298298290be49ed3e96af4b77bf505067606fc5b6705f0f6e7fbb4b1e08103e0c57a3f491639b1a834058e2f86557e8ca3911a6212cfa1b8add41467b9466e088db0ddbe41c53196c5f4829633a634af45b336de98e5248a23c36ca357f1594836986efe94e7b07e6f734da078e46c9ef710b2ed8c4be69b1f7fb4ee4f3a508967efad388e7a2ca5eda858f10ced1f10bf9f6ebe67c54bb1dd0f2a94abff71d7656202be792277b56d142d348fb3c3662bdc719dca38c0c1dda146082d74452aa66a9dc0b0607db44843df1b3b9a97e9a36df91877f6d26d2095b930dd365af208a6610c1946be66f7ffead779bac02d4673325abe205fa9692da7112c4cbed41c11b3d833d48f720caf147bc1ba11e80aaf8b391e70cd5bb75b0781c50a78fd89e424f7c5dc31162afdb010b814eb0324d6d0a12ae8bfe4c1686d76a65f2b0b6dbaf9de33981d112211c21e15c977c84077a88105992e42c3f90d51a226fb087fd3710f8cc4e4b1f58232c466d5dd766dffe40e08b863de396c8acb4dd3f1a3fd2961f5a39003b21ccb895e2744018b6321a0746218589bef469b54e8c1a7ae4727e93c8895ea6b0e62c7a6ec29b4262fad489937f122c4a3692cb8717aae1bd664573b272a53386662ac5bdf742a02a1a67878033ea772a9a9bb15975dc06358c76e4d5e7d7395d0b090ea7bccecae260c6e739edc76b8196b0122d74e5f969b7c89999d5d9c3b38060c8afe86e7e99bddf8f9160a56ff5a049e2d545c24be2b54e89536fc499cc1ad9c2bb4444362cab382558f5bcc4989a6baa42b4dfb92f53dd5f238eb62a3af0dae0372a90a16fd3e58b81ab2f552814132000f7b420c67ce46a4d71af40695383e81044f99e124815068910e6c1e2d9d6ad7d2d69b7ad2ce3c2990078dc6eca082ed5dea4663483383a9a2d63453b8f76fb08ab7db2bd37cc8e8c4bacea2399e35aa1ecff3f1faebb19781d3818faff099b8bda4dfae745a25f5b7921662738b818de320c01cc4e2cdfe88b6063e7b22c4b4065afc8c25b0a924159aad5eff89455a47a4ddc833a9aec23f162e5c0b1552129079a358347822d518be7f091d90091ce94104a2d46733c9e47d4ae2ea48f90535c81a8aaa06ae91f6c5389ffc2c8b974f8c95a15e21ab74d1bd51c2901dff67fb304b4ad6b40eafab0dfcd096d2c918f4d2021dc6a7ce5d310346b589fd7004ec51eae3bf617e7089394f2cf763c3ecd8ad8741e3a581818feb8a894f5c61ab35304385911c0d219930bb23267ee535a27e0dd4c00b7043d0600f5675963990312598e9e6b20694c8bcbf8396eca3bbccb81f327b7a00a86eea21b36ff060a97fff593107d3c6b4ef76ed1661ec826d894e2195c194c8306b019e576655401d4f4e8321f29004cd05799ad06403de50d8744eb6c2160bea07390af18f3f084b0f2ef2de9f0c72a4924457d78cbccab680f49470d74d2868980b084876014e930d51fbbba0e12f58c3c337372cf0f2728767b6fb70b249121b8a636752054072c897026cbb28fe0067e37655fc9287955b248440ff34f600d35dbca734910e2acf4e75388757e91f929f30b3840dd5c1881712d4c859d5d5da200fd600e9cf3bf8faaf65d26b5c9d971f0f2a20addb77a36e5e8fc3c90fb03374a3ba1a8aef9b653a0cceae57fcafc5d8693f8cecfdc069247c224e875c61e5142d7f47abaf73cd47b611a813275e2bd40b57a26e4de2511cfe34ef3d0689ee0839092b27ecc1cadebe66b4da413aa69d42a0ab70730ddafa4b6f0d8cfc821f6e220913e206f92f8175a7dff94df5ec1d7482661ded0ad0821d683d164a9a715212ad15709e2786426fac08e4a24393385ce117e74a02e4795cad1fc40c23f83a94eba443d8a2c09d4885b672c794fb2cf4c3419229b9076508291229cd3cd7a4fde03af921f38ccb2b9fac7ced2fc212d0bbf2ef5e4fe9940665dfefcbd3d5db8bb16497619022093bca47f22f277aeb67cde609a2e3913eedaa62df01843463dc8758e19f395115f3b96d64081052f30f35dd1f60ea66fba4017f06c12621257290bdfb6ffeb441c464a73901da7ab5aeef1e489e8fa79f4a4ad30cb1db45bed226182fedae2482eefadfc01928dcbcbf381eb2572aa99add5e55a13913e8886b7f883c39df5230cdac1068319946570b2124156a7230bb96bb4009415aefac29856eca6c75f119543e4c9d15a18667510db71436256d7aab4fbb149f9cf20ff20eed7f93123fa038fb9bcfad139b654fdbb6ae2e8f759f9dd139ea124bb20b0c62295c674f04ba1e2b23250fdc7ae5b286175c61c2b8f93b7887e406cef79355d1bf79d5eacced8f8c8140')   # hex 格式貼入私鑰
TOTP_SECRET = 'JBSWY3DPEHPK3PXP'

def aes_encrypt(key, plaintext):
    iv = os.urandom(12)
    enc = Cipher(algorithms.AES(key), modes.GCM(iv)).encryptor()
    ct = enc.update(plaintext) + enc.finalize()
    return iv, ct, enc.tag

with socket.socket() as s:
    s.connect((HOST, PORT))

    # 1. 接收挑戰
    data = s.recv(1024)
    challenge = data[len(b'AUTH_CHALLENGE'):]

    # 2. 簽名 + 2FA
    signature = sigalg.sign(challenge, DILITHIUM_SK)
    totp = pyotp.TOTP(TOTP_SECRET)
    code = totp.now().encode()

    payload = bytearray(b'AUTH_RESPONSE')
    payload.append(len(USERNAME))
    payload += USERNAME.encode()
    payload += len(signature).to_bytes(2,'big') + signature
    payload += code
    s.sendall(payload)

    if s.recv(32) != b'AUTH_SUCCESS':
        print("Auth failed"); exit()
    print("[*] Authenticated")

    if s.recv(32) != b'LOGIN_SUCCESS':
        print("Login failed"); exit()
    print("[*] Logged in via KMS")

    # 3. Kyber512 會話建立
    data = s.recv(4096)
    server_pk = data[len(b'KEM_PUBLIC'):]
    shared_secret, ciphertext = kemalg.encap(server_pk)
    s.sendall(b'KEM_CIPHERTEXT' + ciphertext)
    assert s.recv(16) == b'KEM_DONE'
    print("[*] Kyber shared secret ready")

    # 4. 加密傳訊
    for msg in [b'Hello, server!', b'This is a secret.']:
        iv, ct2, tag = aes_encrypt(shared_secret, msg)
        s.sendall(b'\x01' + iv + tag + len(ct2).to_bytes(4,'big') + ct2)
    print("[*] Messages sent")
